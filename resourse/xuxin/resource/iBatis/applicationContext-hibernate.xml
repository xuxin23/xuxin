<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-2.5.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<!-- PropertyPlaceholderConfigurer是一个Bean后处理器，它会读取属性配置文件信息，并将这些信息设置成 Spring配置文件的元数据。 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>db.properties</value>
				<!-- 如果有多个属性文件，依次在下面列出来 -->
				<!-- <value>...</value> -->
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
	</bean>

	<!-- 集成Hibernate -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.OracleDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>pro/bbs/domain/UserInfo.hbm.xml</value>
				<value>pro/bbs/domain/Theme.hbm.xml</value>
				<value>pro/bbs/domain/Post.hbm.xml</value>
				<value>pro/bbs/domain/Comments.hbm.xml</value>
			</list>
		</property>
	</bean>
	<!-- 方式2：有外部的hibernate.cfg.xml文件 -->
	<!-- <bean id="sessionFactory2" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"> 
		<property id="configLocation" value="classpath:hibernate.cfg.xml"> </property> 
		</bean> -->

	<!-- 事务管理 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 测试自定义切面类配置 -->
	<bean id="myAop" class="pro.others.MyAop"></bean>

	<!-- AOP配置-自定义切面 -->
	<aop:config>
		<!-- 在dao层所有方法定义一个测试用的切面 -->
		<aop:pointcut expression="execution(public * pro.bbs.dao..*.*(..))"
			id="testAop" />
		<!-- 将自定义切面类应用到该切面上 -->
		<aop:aspect id="myAspect" ref="myAop">
			<aop:before method="before" pointcut-ref="testAop" />
		</aop:aspect>
	</aop:config>

	<!-- AOP配置-事务管理 -->
	<aop:config>
		<!-- 在service层所有方法上定义一个切面 -->
		<aop:pointcut expression="execution(public * pro.bbs.service..*.*(..))"
			id="bussinessService" />
		<!-- 将切面和建议关联 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="bussinessService" />
	</aop:config>

	<!-- 建议 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- Dao配置 -->
	<bean id="userInfoDao" class="pro.bbs.daoImpl.UserInfoDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="postDao" class="pro.bbs.daoImpl.PostDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="themeDao" class="pro.bbs.daoImpl.ThemeDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
</beans>