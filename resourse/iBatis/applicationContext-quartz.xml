<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-2.5.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
	
	<!-- Job配置 -->
	<bean id="scanDirectoryJob" class="pro.bbs.quartz.ScanDirectoryJob" />
	
	<!-- JobDetail配置 -->
	<bean id="scanDirectoryJobDetail" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="pro.bbs.quartz.ScanDirectoryJob"/>
		<property name="jobDataMap">
			<map>
				<entry key="SCAN_DIR" value="F:/logs"/>
			</map>
		</property>
	</bean>
	
	<!-- CronTrigger配置 -->
	<bean id="EveryFiveScan" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="scanDirectoryJobDetail" />
		<property name="cronExpression" value="0 0/2 * * * ?"/>
		<property name="jobDataMap">
			<map>
				<entry key="MSG" value="测试spring集成quartz的触发器"/>
			</map>
		</property>
	</bean>
	
	<!-- Scheduler配置-RAMJobStore -->
	<!-- <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="EveryFiveScan"/>
			</list>
		</property>
	</bean> -->
	
	<!-- Scheduler配置-JDBC JobStore-->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 第一次运行需要这个配置将Jobs加载到数据库中，以后就不需要了，直接从数据库中加载 -->
		<property name="triggers">
			<list>
				<ref bean="EveryFiveScan"/>
			</list>
		</property>
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"/>
		
		<!-- 事务管理 -->
		<property name="transactionManager" ref="txManager"/>
		
		<!-- quartz基础配置 -->
		<property name="quartzProperties">
			<props>
				<!-- 线程池 -->
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">10</prop>
				<prop key="org.quartz.threadPool.threadPriority">5</prop>
				<prop key="org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread">true</prop>
				
				<!-- JobStore配置为数据库存储Jobs -->
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbc.jdbcjobstore.JobStoreTX</prop>
				<!-- 数据库表前缀 ，默认为QRTZ_-->
				<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
				<!-- 配置数据库平台的代理(DriverDelegate用来和相应的数据库进行通信) -->
				<prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
				
				<!-- 使用外部的数据源 -->
				<!-- <prop key="org.quartz.jobStore.dataSource">qzDS</prop>
				<prop key="org.quartz.dataSource.qzDS.jndiURL">${jdbc.jndi}</prop>
				<prop key="org.quartz.dataSource.qzDS.driver">${jdbc.driverClassName}</prop>
				<prop key="org.quartz.dataSource.qzDS.user">${jdbc.username}</prop>
				<prop key="org.quartz.dataSource.qzDS.password">${jdbc.password}</prop>
				<prop key="org.quartz.dataSource.qzDS.maxConnections">30</prop> -->
			</props>
		</property>
	</bean>
</beans>